use glam::Vec2;

use crate::key_code::KeyCode;

/// Universal user touch input interface event
#[derive(Clone, Debug)]
pub enum TouchInputEvent {
    /// Touch event, or mouse down.
    Begin { id: usize, position: Vec2 },
    /// Touch moved or mouse moved while down.
    Move {
        id: usize,
        position: Vec2,
        delta: Vec2,
    },
    /// Touch went up or mouse button released.
    End { id: usize, position: Vec2 },
}

impl TouchInputEvent {
    pub fn _offset(&self, offset: Vec2) -> TouchInputEvent {
        let mut event = self.clone();
        match &mut event {
            TouchInputEvent::Begin { position, .. }
            | TouchInputEvent::Move { position, .. }
            | TouchInputEvent::End { position, .. } => *position += offset,
        }

        event
    }
}

#[derive(Clone, Debug)]
pub enum MouseButton {
    Left,
    Right,
    Middle,
    Forward,
    Back,
    Other(u16),
}

/// Possible mouse touch events that is supported by the app.
#[derive(Clone, Debug)]
pub enum MouseTouchEvent {
    /// When the user clicks down on the mouse
    Down(MouseButton),
    /// When the user releases the pressure on the mouse
    Up(MouseButton),
}

/// Mouse event generated by the application in response to OS events
#[derive(Clone, Debug)]
pub enum MouseEvent {
    /// Emitted when the mouse cursor is moved
    Move(Vec2),
    /// Emitted when the mouse scroll wheel is scrolled.
    Scroll(Vec2),
}

#[derive(Clone, Debug, Default)]
pub struct KeyboardModifiers {
    pub shift: bool,
    pub control: bool,
    pub alt: bool,
    pub command: bool,
}

#[derive(Clone, Debug)]
pub enum KeyEvent {
    /// Emitted when a keyboard key is pressed.
    Down(KeyCode, bool),
    /// Emitted when a keyboard key is released.
    Up(KeyCode),
}
